// Generated by CoffeeScript 1.4.0

/*
Hayfever for Chrome
Options Page JavaScript

by Mike Green (mike.is.green@gmail.com)
*/


(function() {
  var $;

  $ = jQuery;

  $.fn.selectOption = function(val) {
    this.find("option[value='" + val + "']").attr('selected', 'selected');
    return this;
  };

  $(function() {
    var $form_fields, $password_field, $subdomain_field, $username_field, auth_string, bg_page, color_picker, plugin_prefs, prefs, subdomain, username;
    $subdomain_field = $('#harvest-subdomain');
    $username_field = $('#harvest-username');
    $password_field = $('#harvest-password');
    $form_fields = $('input[type!= "submit"], select');
    subdomain = localStorage['harvest_subdomain'];
    username = localStorage['harvest_username'];
    auth_string = localStorage['harvest_auth_string'];
    plugin_prefs = localStorage['hayfever_prefs'];
    bg_page = chrome.extension.getBackgroundPage();
    color_picker = $.farbtastic('#badge-color-picker', function(color) {
      return $('#badge-color').val(color).css('background-color', color);
    });
    if (subdomain) {
      $subdomain_field.val(subdomain);
    }
    if (username) {
      $username_field.val(username);
    }
    if (auth_string) {
      $('#harvest-password').next('.hint').html("We've successfully used your password to build an authentication string. This field will remain blank because we don't actually store your password. You can enter a new password at any time to rebuild the authentication string.");
    }
    if (plugin_prefs) {
      prefs = JSON.parse(plugin_prefs);
      if ((prefs.enable_analytics != null) && prefs.enable_analytics) {
        $('#enable-analytics').attr('checked', 'checked');
      }
      if (prefs.hasOwnProperty('badge_display')) {
        $('#badge-display').selectOption(prefs.badge_display);
      }
      if (prefs.hasOwnProperty('badge_format')) {
        $('#badge-format').selectOption(prefs.badge_format);
      }
      if (prefs.hasOwnProperty('badge_color')) {
        $('#badge-color').val(prefs.badge_color);
        color_picker.setColor(prefs.badge_color);
      }
      if (prefs.hasOwnProperty('show_task_notes') && prefs.show_task_notes) {
        $('#show-task-notes').attr('checked', 'checked');
      }
      if (prefs.hasOwnProperty('badge_blink') && prefs.badge_blink) {
        $('#badge-blink').attr('checked', 'checked');
      }
    }
    return $('#options').submit(function(evt) {
      var b64_auth_string, temp_password;
      prefs = {};
      temp_password = '';
      $form_fields.each(function() {
        var field_name, field_type, field_val;
        field_name = $(this).attr('name');
        field_type = $(this).attr('type');
        field_val = $(this).val();
        switch (field_name) {
          case 'harvest_subdomain':
          case 'harvest_username':
            if (field_val.length > 0) {
              return localStorage.setItem(field_name, field_val);
            }
            break;
          case 'harvest_password':
            return temp_password = field_val;
          default:
            if (field_type === 'checkbox') {
              prefs[field_name] = $(this).is(':checked');
              return true;
            } else {
              prefs[field_name] = field_val;
              return true;
            }
        }
      });
      if (localStorage['harvest_username'] && temp_password) {
        b64_auth_string = btoa("" + localStorage['harvest_username'] + ":" + temp_password);
        localStorage.setItem('harvest_auth_string', b64_auth_string);
      }
      if (!prefs.hasOwnProperty('enable_analytics')) {
        prefs.enable_analytics = false;
      }
      if (!prefs.hasOwnProperty('show_task_notes')) {
        prefs.show_task_notes = false;
      }
      localStorage.setItem('hayfever_prefs', JSON.stringify(prefs));
      $('#status').addClass('success').html('Options successfully saved').fadeIn(400);
      window.scrollTo(0, 0);
      bg_page.location.reload();
      if (!bg_page.application.refresh_interval) {
        bg_page.application.start_refresh_interval();
      }
      return false;
    });
  });

}).call(this);
