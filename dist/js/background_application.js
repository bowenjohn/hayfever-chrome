// Generated by CoffeeScript 1.6.3
/*
Background Page Application Class
*/


(function() {
  var BackgroundApplication,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BackgroundApplication = (function() {
    function BackgroundApplication(subdomain, auth_string) {
      this.subdomain = subdomain;
      this.auth_string = auth_string;
      this.badge_flash = __bind(this.badge_flash, this);
      this.badge_color = __bind(this.badge_color, this);
      this.refresh_hours = __bind(this.refresh_hours, this);
      this.set_badge = __bind(this.set_badge, this);
      this.client = new Harvest(this.subdomain, this.auth_string);
      this.version = '0.3.0';
      this.authorized = false;
      this.total_hours = 0.0;
      this.current_hours = 0.0;
      this.current_task = null;
      this.badge_flash_interval = 0;
      this.refresh_interval = 0;
      this.refresh_interval_time = 36000;
      this.todays_entries = [];
      this.projects = [];
      this.preferences = {};
      this.timer_running = false;
      chrome.browserAction.setTitle({
        title: "Hayfever for Harvest"
      });
    }

    BackgroundApplication.get_auth_data = function(callback) {
      return chrome.storage.local.get(['harvest_subdomain', 'harvest_auth_string', 'harvest_username'], function(items) {
        return callback(items);
      });
    };

    BackgroundApplication.get_preferences = function(callback) {
      return chrome.storage.local.get('hayfever_prefs', function(items) {
        return callback(items);
      });
    };

    BackgroundApplication.migrate_preferences = function(callback) {
      var options, prefs;
      options = {
        harvest_subdomain: localStorage['harvest_subdomain'],
        harvest_auth_string: localStorage['harvest_auth_string'],
        harvest_username: localStorage['harvest_username']
      };
      prefs = localStorage['hayfever_prefs'] ? JSON.parse(localStorage['hayfever_prefs']) : null;
      if (prefs) {
        options.hayfever_prefs = prefs;
      }
      return chrome.storage.local.set(options, function() {
        return callback(options);
      });
    };

    BackgroundApplication.prototype.upgrade_detected = function() {
      var stored_version;
      stored_version = localStorage.getItem('hayfever_version');
      if (!stored_version) {
        localStorage.setItem('hayfever_version', this.version);
        return false;
      } else {
        return stored_version === this.version;
      }
    };

    BackgroundApplication.prototype.start_refresh_interval = function() {
      return this.refresh_interval = setInterval(this.refresh_hours, this.refresh_interval_time);
    };

    BackgroundApplication.prototype.get_preferences = function() {
      var _this = this;
      return BackgroundApplication.get_preferences(function(items) {
        return _this.preferences = items.hayfever_prefs || {};
      });
    };

    BackgroundApplication.prototype.get_auth_data = function(callback) {};

    BackgroundApplication.prototype.auth_data_exists = function() {
      var auth;
      auth = this.get_auth_data();
      return !auth.subdomain.isBlank() && !auth.auth_string.isBlank();
    };

    BackgroundApplication.prototype.set_badge = function() {
      var badge_color, badge_text, prefs;
      this.get_preferences();
      prefs = this.preferences;
      badge_color = $.hexColorToRGBA(prefs.badge_color);
      switch (prefs.badge_display) {
        case 'current':
          badge_text = prefs.badge_format === 'decimal' ? this.current_hours.toFixed(2) : this.current_hours.toClockTime();
          break;
        case 'total':
          badge_text = prefs.badge_format === 'decimal' ? this.total_hours.toFixed(2) : this.total_hours.toClockTime();
          break;
        default:
          badge_text = '';
      }
      chrome.browserAction.setBadgeBackgroundColor({
        color: badge_color
      });
      return chrome.browserAction.setBadgeText({
        text: badge_text
      });
    };

    BackgroundApplication.prototype.refresh_hours = function(callback, force) {
      var prefs, todays_hours,
        _this = this;
      if (force == null) {
        force = false;
      }
      console.log('refreshing hours');
      this.get_preferences();
      prefs = this.preferences;
      callback = typeof callback === 'function' ? callback : $.noop;
      todays_hours = this.client.get_today();
      todays_hours.success(function(json) {
        var current_hours, total_hours;
        _this.authorized = true;
        _this.current_task = null;
        total_hours = 0.0;
        current_hours = '';
        _this.projects = json.projects;
        _this.todays_entries = json.day_entries;
        $.each(_this.todays_entries, function(i, v) {
          total_hours += v.hours;
          if (v.hasOwnProperty('timer_started_at') && v.timer_started_at) {
            current_hours = parseFloat(v.hours);
            v.running = true;
            _this.current_task = v;
          }
          return _this.todays_entries[i] = v;
        });
        _this.total_hours = total_hours;
        if (typeof current_hours === 'number') {
          _this.current_hours = current_hours;
          _this.timer_running = true;
          _this.start_badge_flash();
          chrome.browserAction.setTitle({
            title: "Currently working on: " + _this.current_task.client + " - " + _this.current_task.project
          });
        } else {
          _this.current_hours = 0.0;
          _this.timer_running = false;
          _this.stop_badge_flash();
          chrome.browserAction.setTitle({
            title: 'Hayfever for Harvest'
          });
        }
        _this.set_badge();
        return callback.call(_this.todays_entries);
      });
      return todays_hours.error(function(xhr, text_status, error_thrown) {
        console.log('Error refreshing hours!');
        if (xhr.status === 401) {
          _this.authorized = false;
          chrome.browserAction.setBadgeBackgroundColor({
            color: [255, 0, 0, 255]
          });
          return chrome.browserAction.setBadgeText({
            text: '!'
          });
        }
      });
    };

    BackgroundApplication.prototype.badge_color = function(alpha) {
      var color, prefs;
      this.get_preferences();
      prefs = this.preferences;
      color = $.hexColorToRGBA(prefs.badge_color, alpha);
      return chrome.browserAction.setBadgeBackgroundColor({
        color: color
      });
    };

    BackgroundApplication.prototype.badge_flash = function(alpha) {
      this.badge_color(255);
      return setTimeout(this.badge_color, 1000, 100);
    };

    BackgroundApplication.prototype.start_badge_flash = function() {
      var prefs;
      console.log('Starting badge blink');
      this.get_preferences();
      prefs = this.preferences;
      if (this.badge_flash_interval === 0 && prefs.badge_blink) {
        return this.badge_flash_interval = setInterval(this.badge_flash, 2000);
      }
    };

    BackgroundApplication.prototype.stop_badge_flash = function() {
      if (this.badge_flash_interval !== 0) {
        console.log('Stopping badge blink');
        clearInterval(this.badge_flash_interval);
        this.badge_flash_interval = 0;
        return this.badge_color(255);
      }
    };

    return BackgroundApplication;

  })();

  window.BackgroundApplication = BackgroundApplication;

}).call(this);
